using System;
using System.Linq;
using System.Security.Cryptography;

namespace ThinSdk.Neo.Cryptography
{
    public class Crypto
    {
        public static readonly Crypto Default = new Crypto();

        public byte[] Sign(byte[] message, byte[] prikey, byte[] pubkey)
        {
            using (var ecdsa = ECDsa.Create(new ECParameters
            {
                Curve = ECCurve.NamedCurves.nistP256,
                D = prikey,
                Q = new ECPoint
                {
                    X = pubkey.Take(32).ToArray(),
                    Y = pubkey.Skip(32).ToArray()
                }
            }))
            {
                return ecdsa.SignData(message, HashAlgorithmName.SHA256);
            }
        }

        public bool VerifySignature(byte[] message, byte[] signature, byte[] pubkey)
        {
            if (pubkey.Length == 33 && (pubkey[0] == 0x02 || pubkey[0] == 0x03))
            {
                try
                {
                    pubkey = Cryptography.ECC.ECPoint.DecodePoint(pubkey, Cryptography.ECC.ECCurve.Secp256r1).EncodePoint(false).Skip(1).ToArray();
                }
                catch
                {
                    return false;
                }
            }
            else if (pubkey.Length == 65 && pubkey[0] == 0x04)
            {
                pubkey = pubkey.Skip(1).ToArray();
            }
            else if (pubkey.Length != 64)
            {
                throw new ArgumentException();
            }
            using (var ecdsa = ECDsa.Create(new ECParameters
            {
                Curve = ECCurve.NamedCurves.nistP256,
                Q = new ECPoint
                {
                    X = pubkey.Take(32).ToArray(),
                    Y = pubkey.Skip(32).ToArray()
                }
            }))
            {
                //"4e454f74002516495dce616f7f74617e0fc4b805583af2602a238df63fb0a5610c000000000691310000000000a39520000000fd28080dd3037b2267726f757073223a5b5d2c226665617475726573223a7b2273746f72616765223a66616c73652c2270617961626c65223a66616c73657d2c22616269223a7b2268617368223a22307838373836306537306433326465353665363837303735326239353233323433386233633835616132222c22656e747279506f696e74223a7b226e616d65223a226d61696e222c22706172616d6574657273223a5b7b226e616d65223a226d6574686f64222c2274797065223a22537472696e67227d2c7b226e616d65223a2261726773222c2274797065223a224172726179227d5d2c2272657475726e54797065223a22427974654172726179227d2c226d6574686f6473223a5b7b226e616d65223a2262616c616e63654f66222c22706172616d6574657273223a5b7b226e616d65223a226163636f756e74222c2274797065223a22427974654172726179227d5d2c2272657475726e54797065223a22496e7465676572227d2c7b226e616d65223a22646563696d616c73222c22706172616d6574657273223a5b5d2c2272657475726e54797065223a22496e7465676572227d2c7b226e616d65223a226e616d65222c22706172616d6574657273223a5b5d2c2272657475726e54797065223a22537472696e67227d2c7b226e616d65223a2273796d626f6c222c22706172616d6574657273223a5b5d2c2272657475726e54797065223a22537472696e67227d2c7b226e616d65223a22737570706f727465645374616e6461726473222c22706172616d6574657273223a5b5d2c2272657475726e54797065223a224172726179227d2c7b226e616d65223a22746f74616c537570706c79222c22706172616d6574657273223a5b5d2c2272657475726e54797065223a22496e7465676572227d2c7b226e616d65223a226465706c6f79222c22706172616d6574657273223a5b5d2c2272657475726e54797065223a22426f6f6c65616e227d5d2c226576656e7473223a5b7b226e616d65223a227472616e73666572222c22706172616d6574657273223a5b7b226e616d65223a2261726731222c2274797065223a22427974654172726179227d2c7b226e616d65223a2261726732222c2274797065223a22427974654172726179227d2c7b226e616d65223a2261726733222c2274797065223a22496e7465676572227d5d2c2272657475726e54797065223a225369676e6174757265227d5d7d2c227065726d697373696f6e73223a5b7b22636f6e7472616374223a222a222c226d6574686f6473223a222a227d5d2c22747275737473223a5b5d2c22736166654d6574686f6473223a5b5d2c226578747261223a6e756c6c7d0d4a0456010c14ce616f7f74617e0fc4b805583af2602a238df63f605701022141e97d38a00c0140db219a509a50b425e0000000214139536e3c70780c0962616c616e63654f6697270f0000007910ce2135c000000040780c08646563696d616c7397270c00000021350e01000040780c046e616d6597270c00000021351301000040780c0673796d626f6c97270c00000021350201000040780c066465706c6f7997270c00000021354001000040780c12737570706f727465645374616e646172647397270c0000002135ce00000040780c0b746f74616c537570706c7997270c0000002135d500000040780c087472616e736665729727170000007910ce7911ce7912ce682154355a01000040104057000178ca0c0114db21b3253c0000000c3254686520706172616d65746572206163636f756e742053484f554c442062652032302d62797465206164647265737365732e21453a21419bf667ce0c056173736574215035460200007821503559020000db21401840570101782141a9c54b41706827090000006812ce4011400c024132400c01414013c34a100c054e45502d35d04a110c054e45502d37d04a120c064e45502d3130d04021419bf667ce0c08636f6e7472616374215035e00100000c0b746f74616c537570706c7921503504020000db214057010021419bf667ce0c08636f6e7472616374215035af01000021419bf667ce0c0561737365742150359b010000700c0b746f74616c537570706c790c070000c16ff28623db21215335d201000068210c14ce616f7f74617e0fc4b805583af2602a238df63f0c070000c16ff28623db21215335c2010000114057030478ca0c0114db219a509a50b4251200000079ca0c0114db21b325410000000c3754686520706172616d65746572732066726f6d20616e6420746f2053484f554c442062652032302d62797465206164647265737365732e21453a7a10b627360000000c2c54686520706172616d6574657220616d6f756e74204d5553542062652067726561746572207468616e20302e21453a7921357efeffff25070000001040782141f827ec8c251300000078db217bdb21b42707000000104021419bf667ce0c0561737365742150357d0000007068782150358e000000db2171697ab52707000000104078799a509a50b425070000001140697ab327130000006878215035d000000023110000006878697a9f215335a7000000687921503548000000db217268796a7a9e2153358f0000002178797a21530c087472616e7366657214c04195016f611140570102212112c34a781050d04a79db301150d07023050000006840570202217811ce798b707810ce68215041925de8317123050000006940570202217811ce79db308b707810ce68215041925de8317123050000006940570103217811ce79db308b707810ce687a215341e63f18842140570103217811ce798b707810ce687a215341e63f18842140570102217811ce798b707810ce682150412f58c5ed214041ce352c85"
                return ecdsa.VerifyData(message, signature, HashAlgorithmName.SHA256);
            }
        }
    }
}
